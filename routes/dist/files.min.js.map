{"version":3,"sources":["files.js"],"names":["router","require","Router","path","multer","uuidv4","v4","storage","diskStorage","File","req","file","cb","filename","concat","Date","now","Math","round","random","extname","originalname","upload","limits","fileSize","single","res","uniqueName","err","response","regeneratorRuntime","async","_context","prev","next","abrupt","status","send","error","message","uuid","size","awrap","save","sent","post","json","env","APP_BASE_URL","stop","_req$body","emailTo","emailFrom","_context2","body","expiresIn","findOne","sender","receiver","to","subject","text","html","process","parseInt","success","module","exports"],"mappings":"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","file":"files.min.js","sourcesContent":["\r\nconst router = require('express').Router();\r\nconst multer = require('multer');\r\nconst path = require('path');\r\nconst File = require('../models/file');\r\nconst { v4: uuidv4 } = require('uuid');\r\n\r\nlet storage = multer.diskStorage({\r\n    destination: (req, file, cb) => cb(null, 'uploads/') ,\r\n    filename: (req, file, cb) => {\r\n        const uniqueName = `${Date.now()}-${Math.round(Math.random() * 1E9)}${path.extname(file.originalname)}`;\r\n              cb(null, uniqueName)\r\n    } ,\r\n});\r\n\r\nlet upload = multer({ storage, limits:{ fileSize: 1000000 * 100 }, }).single('myfile'); //100mb\r\n\r\nrouter.post('/', (req, res) => {\r\n    upload(req, res, async (err) => {\r\n      if (err) {\r\n        return res.status(500).send({ error: err.message });\r\n      }\r\n        const file = new File({\r\n            filename: req.file.filename,\r\n            uuid: uuidv4(),\r\n            path: req.file.path,\r\n            size: req.file.size\r\n        });\r\n        const response = await file.save();\r\n        res.json({ file: `${process.env.APP_BASE_URL}/files/${response.uuid}` });\r\n      });\r\n});\r\n\r\nrouter.post('/send', async (req, res) => {\r\n  const { uuid, emailTo, emailFrom, expiresIn } = req.body;\r\n  if(!uuid || !emailTo || !emailFrom) {\r\n      return res.status(422).send({ error: 'All fields are required except expiry.'});\r\n  }\r\n  // Get data from db \r\n\r\n    const file = await File.findOne({ uuid: uuid });\r\n    if(file.sender) {\r\n      return res.status(422).send({ error: 'Email already sent once.'});\r\n    }\r\n    file.sender = emailFrom;\r\n    file.receiver = emailTo;\r\n    const response = await file.save();\r\n    // send mail\r\n    const sendMail = require('../services/emailService');\r\n    sendMail({\r\n      from: emailFrom,\r\n      to: emailTo,\r\n      subject: 'inShare file sharing',\r\n      text: `${emailFrom} shared a file with you.`,\r\n      html: require('../services/emailTemplate')({\r\n                emailFrom, \r\n                downloadLink: `${process.env.APP_BASE_URL}/files/${file.uuid}` ,\r\n                size: parseInt(file.size/1000) + ' KB',\r\n                expires: '24 hours'\r\n            })\r\n    });\r\n      return res.json({success: true});\r\n   \r\n});\r\n\r\nmodule.exports = router;"]}