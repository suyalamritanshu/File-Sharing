{"version":3,"sources":["files.js"],"names":["router","require","Router","multer","File","uuidv4","path","diskStorage","destination","req","file","cb","concat","Date","now","Math","round","random","extname","originalname","storage","limits","fileSize","single","post","res","filename","err","response","regeneratorRuntime","async","_context","prev","next","uniqueName","abrupt","send","error","message","size","awrap","save","sent","json","process","env","APP_BASE_URL","uuid","stop","_req$body","emailTo","emailFrom","_context2","body","expiresIn","status","findOne","sender","receiver","subject","text","html","downloadLink","parseInt","success","module","exports"],"mappings":"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","file":"files.min.js","sourcesContent":["const router = require('express').Router();\r\nconst multer = require('multer');\r\nconst path = require('path');\r\nconst File = require('../models/file');\r\nconst { v4: uuidv4 } = require('uuid');\r\n\r\nlet storage = multer.diskStorage({\r\n    destination: (req, file, cb) => cb(null, 'uploads/') ,\r\n    filename: (req, file, cb) => {\r\n        const uniqueName = `${Date.now()}-${Math.round(Math.random() * 1E9)}${path.extname(file.originalname)}`;\r\n              cb(null, uniqueName)\r\n    } ,\r\n});\r\n\r\nlet upload = multer({ storage, limits:{ fileSize: 1000000 * 100 }, }).single('myfile'); //100mb\r\n\r\nrouter.post('/', (req, res) => {\r\n    upload(req, res, async (err) => {\r\n      if (err) {\r\n        return res.status(500).send({ error: err.message });\r\n      }\r\n        const file = new File({\r\n            filename: req.file.filename,\r\n            uuid: uuidv4(),\r\n            path: req.file.path,\r\n            size: req.file.size\r\n        });\r\n        const response = await file.save();\r\n        res.json({ file: `${process.env.APP_BASE_URL}/files/${response.uuid}` });\r\n      });\r\n});\r\n\r\nrouter.post('/send', async (req, res) => {\r\n  const { uuid, emailTo, emailFrom, expiresIn } = req.body;\r\n  if(!uuid || !emailTo || !emailFrom) {\r\n      return res.status(422).send({ error: 'All fields are required except expiry.'});\r\n  }\r\n  // Get data from db \r\n\r\n    const file = await File.findOne({ uuid: uuid });\r\n    if(file.sender) {\r\n      return res.status(422).send({ error: 'Email already sent once.'});\r\n    }\r\n    file.sender = emailFrom;\r\n    file.receiver = emailTo;\r\n    const response = await file.save();\r\n    // send mail\r\n    const sendMail = require('../services/emailService');\r\n    sendMail({\r\n      from: emailFrom,\r\n      to: emailTo,\r\n      subject: 'inShare file sharing',\r\n      text: `${emailFrom} shared a file with you.`,\r\n      html: require('../services/emailTemplate')({\r\n                emailFrom, \r\n                downloadLink: `${process.env.APP_BASE_URL}/files/${file.uuid}` ,\r\n                size: parseInt(file.size/1000) + ' KB',\r\n                expires: '24 hours'\r\n            })\r\n    });\r\n      return res.json({success: true});\r\n   \r\n});\r\n\r\nmodule.exports = router;"]}