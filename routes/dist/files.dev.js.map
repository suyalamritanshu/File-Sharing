{"version":3,"sources":["files.js"],"names":["router","require","Router","multer","path","File","uuidv4","v4","storage","diskStorage","destination","req","file","cb","filename","uniqueName","Date","now","Math","round","random","extname","originalname","upload","limits","fileSize","single","post","res","err","status","send","error","message","uuid","size","save","response","json","process","env","APP_BASE_URL","body","emailTo","emailFrom","expiresIn","findOne","sender","receiver","sendMail","from","to","subject","text","html","downloadLink","parseInt","expires","success","module","exports"],"mappings":"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","sourcesContent":["const router = require('express').Router();\r\nconst multer = require('multer');\r\nconst path = require('path');\r\nconst File = require('../models/file');\r\nconst { v4: uuidv4 } = require('uuid');\r\n\r\nlet storage = multer.diskStorage({\r\n    destination: (req, file, cb) => cb(null, 'uploads/') ,\r\n    filename: (req, file, cb) => {\r\n        const uniqueName = `${Date.now()}-${Math.round(Math.random() * 1E9)}${path.extname(file.originalname)}`;\r\n              cb(null, uniqueName)\r\n    } ,\r\n});\r\n\r\nlet upload = multer({ storage, limits:{ fileSize: 1000000 * 100 }, }).single('myfile'); //100mb\r\n\r\nrouter.post('/', (req, res) => {\r\n    upload(req, res, async (err) => {\r\n      if (err) {\r\n        return res.status(500).send({ error: err.message });\r\n      }\r\n        const file = new File({\r\n            filename: req.file.filename,\r\n            uuid: uuidv4(),\r\n            path: req.file.path,\r\n            size: req.file.size\r\n        });\r\n        const response = await file.save();\r\n        res.json({ file: `${process.env.APP_BASE_URL}/files/${response.uuid}` });\r\n      });\r\n});\r\n\r\nrouter.post('/send', async (req, res) => {\r\n  const { uuid, emailTo, emailFrom, expiresIn } = req.body;\r\n  if(!uuid || !emailTo || !emailFrom) {\r\n      return res.status(422).send({ error: 'All fields are required except expiry.'});\r\n  }\r\n  // Get data from db \r\n\r\n    const file = await File.findOne({ uuid: uuid });\r\n    if(file.sender) {\r\n      return res.status(422).send({ error: 'Email already sent once.'});\r\n    }\r\n    file.sender = emailFrom;\r\n    file.receiver = emailTo;\r\n    const response = await file.save();\r\n    // send mail\r\n    const sendMail = require('../services/emailService');\r\n    sendMail({\r\n      from: emailFrom,\r\n      to: emailTo,\r\n      subject: 'inShare file sharing',\r\n      text: `${emailFrom} shared a file with you.`,\r\n      html: require('../services/emailTemplate')({\r\n                emailFrom, \r\n                downloadLink: `${process.env.APP_BASE_URL}/files/${file.uuid}` ,\r\n                size: parseInt(file.size/1000) + ' KB',\r\n                expires: '24 hours'\r\n            })\r\n    });\r\n      return res.json({success: true});\r\n   \r\n});\r\n\r\nmodule.exports = router;"],"file":"files.dev.js"}